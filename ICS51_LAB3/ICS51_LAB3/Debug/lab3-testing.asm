; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.30501.0 

	TITLE	C:\Users\Brian\Documents\Dropbox\Projects\ICS51_LAB3\ICS51_LAB3\lab3-testing.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_num_of_tests
PUBLIC	_num_of_tests_passed
_BSS	SEGMENT
_num_of_tests DD 01H DUP (?)
_num_of_tests_passed DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_test_selectionSort
PUBLIC	_test_factorial
PUBLIC	_test_vectorOperations
PUBLIC	_test_changeCase
PUBLIC	_test_fibonacci
PUBLIC	_main
PUBLIC	_findMinIndex_c
PUBLIC	_selectionSort_c
PUBLIC	_factorial_c
PUBLIC	_performOperation_c
PUBLIC	_vectorOperations_c
PUBLIC	_fibonacci_c
PUBLIC	??_C@_0CJ@ODDLHEFD@ICS?551?0?5Lab?53?5?6Name?3?5?$CFs?6Student?5@ ; `string'
PUBLIC	??_C@_0DF@HDBEJMPD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART1?5?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_0DF@IBEDHBAL@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART2?5?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0DF@GGFONHJM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART3?5?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0DF@LOJNKMLK@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART4?5?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0DF@FJIAAKCN@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART5?5?$DN?$DN?$DN@ ; `string'
PUBLIC	??_C@_0DF@KJFDODAM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5SUMMARY?5?$DN?$DN@ ; `string'
PUBLIC	??_C@_0CA@NPOABGGE@?$BL?$FL31mAll?5?$CFd?5tests?5failed?4?6?6?$BL?$FL0m?$AA@ ; `string'
PUBLIC	??_C@_0CA@DPLJDPEC@?$BL?$FL32mAll?5?$CFd?5tests?5passed?4?6?6?$BL?$FL0m?$AA@ ; `string'
PUBLIC	??_C@_0CG@BHECJLFJ@?$BL?$FL33m?$CFd?5out?5of?5?$CFd?5tests?5passed?4?6@ ; `string'
PUBLIC	??_C@_0BF@JNHJCPMF@Original?5array?5was?3?6?$AA@ ; `string'
PUBLIC	??_C@_03JDANDILB@?$CFd?5?$AA@			; `string'
PUBLIC	??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@ ; `string'
PUBLIC	??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@ ; `string'
PUBLIC	??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@EBKHODNN@?6Original?5array?5is?3?6?$AA@ ; `string'
PUBLIC	??_C@_0DK@MGPNABKM@?$BL?$FL31mTest?5failed?4?5Factorial?$CI?$CFd?$CJ?3@ ; `string'
PUBLIC	??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@ ; `string'
PUBLIC	??_C@_0DH@KJPDLMMI@?$BL?$FL31mTest?5failed?5at?5index?5?$CFd?3?5ex@ ; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc?$AA@			; `string'
PUBLIC	??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@		; `string'
PUBLIC	??_C@_0DK@LMNONIFK@?$BL?$FL31mTest?5failed?4?5Fibonacci?$CI?$CFd?$CJ?3@ ; `string'
EXTRN	__imp__getchar:PROC
EXTRN	__imp__printf:PROC
EXTRN	_memcmp:PROC
EXTRN	_selectionSort:PROC
EXTRN	_factorial:PROC
EXTRN	_vectorOperations:PROC
EXTRN	_changeCase:PROC
EXTRN	_fibonacci:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_yourName:DWORD
EXTRN	_yourStudentID:DWORD
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0DK@LMNONIFK@?$BL?$FL31mTest?5failed?4?5Fibonacci?$CI?$CFd?$CJ?3@
CONST	SEGMENT
??_C@_0DK@LMNONIFK@?$BL?$FL31mTest?5failed?4?5Fibonacci?$CI?$CFd?$CJ?3@ DB 01bH
	DB	'[31mTest failed. Fibonacci(%d): expected %d, got %d', 0aH, 01bH
	DB	'[0m', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@
CONST	SEGMENT
??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@ DB ' ==> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc?$AA@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc?$AA@ DB '%c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KJPDLMMI@?$BL?$FL31mTest?5failed?5at?5index?5?$CFd?3?5ex@
CONST	SEGMENT
??_C@_0DH@KJPDLMMI@?$BL?$FL31mTest?5failed?5at?5index?5?$CFd?3?5ex@ DB 01bH
	DB	'[31mTest failed at index %d: expected %d, got %d', 0aH, 01bH, '['
	DB	'0m', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@
CONST	SEGMENT
??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@ DB 01bH, '['
	DB	'32mTest passed.', 0aH, 01bH, '[0m', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MGPNABKM@?$BL?$FL31mTest?5failed?4?5Factorial?$CI?$CFd?$CJ?3@
CONST	SEGMENT
??_C@_0DK@MGPNABKM@?$BL?$FL31mTest?5failed?4?5Factorial?$CI?$CFd?$CJ?3@ DB 01bH
	DB	'[31mTest failed. Factorial(%d): expected %d, got %d', 0aH, 01bH
	DB	'[0m', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EBKHODNN@?6Original?5array?5is?3?6?$AA@
CONST	SEGMENT
??_C@_0BF@EBKHODNN@?6Original?5array?5is?3?6?$AA@ DB 0aH, 'Original array'
	DB	' is:', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@
CONST	SEGMENT
??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@ DB 0aH, 'Original arra'
	DB	'y was:', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
CONST	SEGMENT
??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@ DB 01bH, '['
	DB	'31m', 0aH, 'Test failed.', 0aH, 01bH, '[0m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
CONST	SEGMENT
??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@ DB 01bH, '['
	DB	'32m', 0aH, 'Test passed.', 0aH, 01bH, '[0m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
CONST	SEGMENT
??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@ DB 0aH, 'Your sorte'
	DB	'd array is:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
CONST	SEGMENT
??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@ DB 0aH, 'Sorted ar'
	DB	'ray should be:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5?$AA@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5?$AA@ DB '%d ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JNHJCPMF@Original?5array?5was?3?6?$AA@
CONST	SEGMENT
??_C@_0BF@JNHJCPMF@Original?5array?5was?3?6?$AA@ DB 'Original array was:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@BHECJLFJ@?$BL?$FL33m?$CFd?5out?5of?5?$CFd?5tests?5passed?4?6@
CONST	SEGMENT
??_C@_0CG@BHECJLFJ@?$BL?$FL33m?$CFd?5out?5of?5?$CFd?5tests?5passed?4?6@ DB 01bH
	DB	'[33m%d out of %d tests passed.', 0aH, 0aH, 01bH, '[0m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DPLJDPEC@?$BL?$FL32mAll?5?$CFd?5tests?5passed?4?6?6?$BL?$FL0m?$AA@
CONST	SEGMENT
??_C@_0CA@DPLJDPEC@?$BL?$FL32mAll?5?$CFd?5tests?5passed?4?6?6?$BL?$FL0m?$AA@ DB 01bH
	DB	'[32mAll %d tests passed.', 0aH, 0aH, 01bH, '[0m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NPOABGGE@?$BL?$FL31mAll?5?$CFd?5tests?5failed?4?6?6?$BL?$FL0m?$AA@
CONST	SEGMENT
??_C@_0CA@NPOABGGE@?$BL?$FL31mAll?5?$CFd?5tests?5failed?4?6?6?$BL?$FL0m?$AA@ DB 01bH
	DB	'[31mAll %d tests failed.', 0aH, 0aH, 01bH, '[0m', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KJFDODAM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5SUMMARY?5?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@KJFDODAM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5SUMMARY?5?$DN?$DN@ DB '='
	DB	'==================== SUMMARY =====================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FJIAAKCN@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART5?5?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@FJIAAKCN@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART5?5?$DN?$DN?$DN@ DB '='
	DB	'===================== PART5 ======================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@LOJNKMLK@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART4?5?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@LOJNKMLK@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART4?5?$DN?$DN?$DN@ DB '='
	DB	'===================== PART4 ======================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GGFONHJM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART3?5?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@GGFONHJM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART3?5?$DN?$DN?$DN@ DB '='
	DB	'===================== PART3 ======================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@IBEDHBAL@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART2?5?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@IBEDHBAL@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART2?5?$DN?$DN?$DN@ DB '='
	DB	'===================== PART2 ======================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HDBEJMPD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART1?5?$DN?$DN?$DN@
CONST	SEGMENT
??_C@_0DF@HDBEJMPD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART1?5?$DN?$DN?$DN@ DB '='
	DB	'===================== PART1 ======================', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ODDLHEFD@ICS?551?0?5Lab?53?5?6Name?3?5?$CFs?6Student?5@
CONST	SEGMENT
??_C@_0CJ@ODDLHEFD@ICS?551?0?5Lab?53?5?6Name?3?5?$CFs?6Student?5@ DB 'ICS'
	DB	' 51, Lab 3 ', 0aH, 'Name: %s', 0aH, 'Student ID: %s', 0aH, 0aH
	DB	00H						; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _fibonacci_c
_TEXT	SEGMENT
_n$ = 8							; size = 4
_fibonacci_c PROC					; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 515  : 	if ( n < 2 )

	cmp	DWORD PTR _n$[ebp], 2
	jae	SHORT $LN2@fibonacci_

; 516  : 		return 1;

	mov	eax, 1
	jmp	SHORT $LN3@fibonacci_

; 517  : 	else

	jmp	SHORT $LN3@fibonacci_
$LN2@fibonacci_:

; 518  : 		return ( fibonacci_c(n-1) + fibonacci_c(n-2) );

	mov	eax, DWORD PTR _n$[ebp]
	sub	eax, 1
	push	eax
	call	_fibonacci_c
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _n$[ebp]
	sub	ecx, 2
	push	ecx
	call	_fibonacci_c
	add	esp, 4
	add	eax, esi
$LN3@fibonacci_:

; 519  : } 

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fibonacci_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _vectorOperations_c
_TEXT	SEGMENT
_i$ = -8						; size = 4
_number_of_elements$ = 8				; size = 4
_first_array$ = 12					; size = 4
_second_array$ = 16					; size = 4
_operation_array$ = 20					; size = 4
_output_array$ = 24					; size = 4
_vectorOperations_c PROC				; COMDAT

; 399  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 400  : 	int i;
; 401  : 	for (i=0; i<number_of_elements; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@vectorOper
$LN2@vectorOper:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@vectorOper:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _number_of_elements$[ebp]
	jge	SHORT $LN4@vectorOper

; 402  : 	{
; 403  : 		output_array[i] = performOperation_c(operation_array[i], first_array[i], second_array[i]);

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _second_array$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _first_array$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _operation_array$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_performOperation_c
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _output_array$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 404  : 	}

	jmp	SHORT $LN2@vectorOper
$LN4@vectorOper:

; 405  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vectorOperations_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _performOperation_c
_TEXT	SEGMENT
tv73 = -196						; size = 4
tv70 = -196						; size = 4
_operation$ = 8						; size = 4
_first$ = 12						; size = 4
_second$ = 16						; size = 4
_performOperation_c PROC				; COMDAT

; 384  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 385  : 	if (operation==0) 

	cmp	DWORD PTR _operation$[ebp], 0
	jne	SHORT $LN8@performOpe

; 386  : 		return first + second;

	mov	eax, DWORD PTR _first$[ebp]
	add	eax, DWORD PTR _second$[ebp]
	jmp	SHORT $LN9@performOpe
	jmp	SHORT $LN9@performOpe
$LN8@performOpe:

; 387  : 	else if (operation==1)

	cmp	DWORD PTR _operation$[ebp], 1
	jne	SHORT $LN6@performOpe

; 388  : 		return first - second;

	mov	eax, DWORD PTR _first$[ebp]
	sub	eax, DWORD PTR _second$[ebp]
	jmp	SHORT $LN9@performOpe
	jmp	SHORT $LN9@performOpe
$LN6@performOpe:

; 389  : 	else if (operation==2)

	cmp	DWORD PTR _operation$[ebp], 2
	jne	SHORT $LN4@performOpe

; 390  : 		return (first > second)? first : second;

	mov	eax, DWORD PTR _first$[ebp]
	cmp	eax, DWORD PTR _second$[ebp]
	jle	SHORT $LN11@performOpe
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN12@performOpe
$LN11@performOpe:
	mov	edx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv70[ebp], edx
$LN12@performOpe:
	mov	eax, DWORD PTR tv70[ebp]
	jmp	SHORT $LN9@performOpe
	jmp	SHORT $LN9@performOpe
$LN4@performOpe:

; 391  : 	else if (operation==3)

	cmp	DWORD PTR _operation$[ebp], 3
	jne	SHORT $LN2@performOpe

; 392  : 		return (first < second)? first : second;

	mov	eax, DWORD PTR _first$[ebp]
	cmp	eax, DWORD PTR _second$[ebp]
	jge	SHORT $LN13@performOpe
	mov	ecx, DWORD PTR _first$[ebp]
	mov	DWORD PTR tv73[ebp], ecx
	jmp	SHORT $LN14@performOpe
$LN13@performOpe:
	mov	edx, DWORD PTR _second$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN14@performOpe:
	mov	eax, DWORD PTR tv73[ebp]
	jmp	SHORT $LN9@performOpe

; 393  : 	else

	jmp	SHORT $LN9@performOpe
$LN2@performOpe:

; 394  : 		return first;

	mov	eax, DWORD PTR _first$[ebp]
$LN9@performOpe:

; 395  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_performOperation_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _factorial_c
_TEXT	SEGMENT
_result$ = -20						; size = 4
_c$ = -8						; size = 4
_n$ = 8							; size = 4
_factorial_c PROC					; COMDAT

; 352  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 353  : 	unsigned int c;
; 354  : 	unsigned int result = 1;

	mov	DWORD PTR _result$[ebp], 1

; 355  :  
; 356  : 	for (c = 1; c <= n; c++)

	mov	DWORD PTR _c$[ebp], 1
	jmp	SHORT $LN3@factorial_
$LN2@factorial_:
	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	mov	DWORD PTR _c$[ebp], eax
$LN3@factorial_:
	mov	eax, DWORD PTR _c$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	ja	SHORT $LN1@factorial_

; 357  : 	result = result * c;

	mov	eax, DWORD PTR _result$[ebp]
	imul	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _result$[ebp], eax
	jmp	SHORT $LN2@factorial_
$LN1@factorial_:

; 358  :  
; 359  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 360  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_factorial_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _selectionSort_c
_TEXT	SEGMENT
_temp$ = -32						; size = 4
_iMin$ = -20						; size = 4
_j$ = -8						; size = 4
_integer_array$ = 8					; size = 4
_array_size$ = 12					; size = 4
_selectionSort_c PROC					; COMDAT

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 105  : 	int j;
; 106  : 	int iMin;
; 107  : 	int temp;
; 108  : 
; 109  : 	// advance the position through the entire array //
; 110  : 	// (could do j < n-1 because single element is also min element) //
; 111  : 	for (j = 0; j < array_size-1; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@selectionS
$LN3@selectionS:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@selectionS:
	mov	eax, DWORD PTR _array_size$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$[ebp], eax
	jge	SHORT $LN5@selectionS

; 112  : 
; 113  : 		// find the index of min element in the unsorted a[j .. n-1] //
; 114  :  		iMin = findMinIndex_c (integer_array, j, array_size);

	mov	eax, DWORD PTR _array_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	push	ecx
	mov	edx, DWORD PTR _integer_array$[ebp]
	push	edx
	call	_findMinIndex_c
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _iMin$[ebp], eax

; 115  :  
; 116  : 		if(iMin != j) { // swap values

	mov	eax, DWORD PTR _iMin$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	je	SHORT $LN1@selectionS

; 117  : 			temp = integer_array[iMin];

	mov	eax, DWORD PTR _iMin$[ebp]
	mov	ecx, DWORD PTR _integer_array$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$[ebp], edx

; 118  : 			integer_array[iMin] = integer_array [j];

	mov	eax, DWORD PTR _iMin$[ebp]
	mov	ecx, DWORD PTR _integer_array$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _integer_array$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 119  : 			integer_array[j] = temp;	

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _integer_array$[ebp]
	mov	edx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN1@selectionS:

; 120  : 		}
; 121  : 	}

	jmp	SHORT $LN3@selectionS
$LN5@selectionS:

; 122  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_selectionSort_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _findMinIndex_c
_TEXT	SEGMENT
_iMin$ = -8						; size = 4
_integer_array$ = 8					; size = 4
_i$ = 12						; size = 4
_j$ = 16						; size = 4
_findMinIndex_c PROC					; COMDAT

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 90   :     int iMin = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _iMin$[ebp], eax

; 91   :     // test against elements after i and before j to find the smallest 
; 92   :     for ( i ; i < j; i++) {

	jmp	SHORT $LN4@findMinInd
$LN3@findMinInd:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@findMinInd:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _j$[ebp]
	jge	SHORT $LN2@findMinInd

; 93   :         // if this element is less, then it is the new minimum   
; 94   :         if (integer_array[i] < integer_array[iMin]) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _integer_array$[ebp]
	mov	edx, DWORD PTR _iMin$[ebp]
	mov	esi, DWORD PTR _integer_array$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	jge	SHORT $LN1@findMinInd

; 95   :             // found new minimum; remember its index 
; 96   :             iMin = i;

	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _iMin$[ebp], eax
$LN1@findMinInd:

; 97   :         }
; 98   :     }

	jmp	SHORT $LN3@findMinInd
$LN2@findMinInd:

; 99   : 
; 100  :     return iMin;

	mov	eax, DWORD PTR _iMin$[ebp]

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_findMinIndex_c ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _main
_TEXT	SEGMENT
_main	PROC						; COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 32   : 	 // Once you are done implementing the required functions, enable the testcases		  
; 33   : 	#define TEST_PART1 1
; 34   : 	#define TEST_PART2 1
; 35   : 	#define TEST_PART3 1
; 36   : 	#define TEST_PART4 1
; 37   : 	#define TEST_PART5 1
; 38   : 
; 39   : 	printf ("ICS 51, Lab 3 \nName: %s\nStudent ID: %s\n\n",yourName, yourStudentID);

	mov	esi, esp
	mov	eax, DWORD PTR _yourStudentID
	push	eax
	mov	ecx, DWORD PTR _yourName
	push	ecx
	push	OFFSET ??_C@_0CJ@ODDLHEFD@ICS?551?0?5Lab?53?5?6Name?3?5?$CFs?6Student?5@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 40   : 
; 41   : 	#if TEST_PART1
; 42   : 		printf("====================== PART1 ======================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@HDBEJMPD@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART1?5?$DN?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 43   : 		test_selectionSort();

	call	_test_selectionSort

; 44   : 		printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 45   : 	#endif
; 46   : 
; 47   : 
; 48   : 	#if TEST_PART2
; 49   : 		printf("====================== PART2 ======================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@IBEDHBAL@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART2?5?$DN?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 50   : 		test_factorial();

	call	_test_factorial

; 51   : 		printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 	#endif
; 53   : 
; 54   : 	
; 55   : 	#if TEST_PART3
; 56   : 		printf("====================== PART3 ======================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@GGFONHJM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART3?5?$DN?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 57   : 		test_vectorOperations();

	call	_test_vectorOperations

; 58   : 		printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 59   : 	#endif
; 60   : 
; 61   : 
; 62   : 	#if TEST_PART4
; 63   : 		printf("====================== PART4 ======================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@LOJNKMLK@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART4?5?$DN?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 64   : 		test_changeCase();

	call	_test_changeCase

; 65   : 		printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 66   : 	#endif
; 67   : 
; 68   : 	#if TEST_PART5
; 69   : 		printf("====================== PART5 ======================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@FJIAAKCN@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5PART5?5?$DN?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 70   : 		test_fibonacci();

	call	_test_fibonacci

; 71   : 		printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : 	#endif
; 73   : 
; 74   : 		printf("===================== SUMMARY =====================\n");

	mov	esi, esp
	push	OFFSET ??_C@_0DF@KJFDODAM@?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?$DN?5SUMMARY?5?$DN?$DN@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 75   : 
; 76   : 	if (num_of_tests_passed == 0)

	cmp	DWORD PTR _num_of_tests_passed, 0
	jne	SHORT $LN4@main

; 77   : 		printf(ANSI_COLOR_RED "All %d tests failed.\n\n" ANSI_COLOR_RESET, num_of_tests);

	mov	esi, esp
	mov	eax, DWORD PTR _num_of_tests
	push	eax
	push	OFFSET ??_C@_0CA@NPOABGGE@?$BL?$FL31mAll?5?$CFd?5tests?5failed?4?6?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN3@main
$LN4@main:

; 78   : 	else if (num_of_tests == num_of_tests_passed)

	mov	eax, DWORD PTR _num_of_tests
	cmp	eax, DWORD PTR _num_of_tests_passed
	jne	SHORT $LN2@main

; 79   : 		printf(ANSI_COLOR_GREEN "All %d tests passed.\n\n" ANSI_COLOR_RESET, num_of_tests);

	mov	esi, esp
	mov	eax, DWORD PTR _num_of_tests
	push	eax
	push	OFFSET ??_C@_0CA@DPLJDPEC@?$BL?$FL32mAll?5?$CFd?5tests?5passed?4?6?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 80   : 	else

	jmp	SHORT $LN3@main
$LN2@main:

; 81   : 		printf(ANSI_COLOR_YELLOW "%d out of %d tests passed.\n\n" ANSI_COLOR_RESET, num_of_tests_passed, num_of_tests);

	mov	esi, esp
	mov	eax, DWORD PTR _num_of_tests
	push	eax
	mov	ecx, DWORD PTR _num_of_tests_passed
	push	ecx
	push	OFFSET ??_C@_0CG@BHECJLFJ@?$BL?$FL33m?$CFd?5out?5of?5?$CFd?5tests?5passed?4?6@
	call	DWORD PTR __imp__printf
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@main:

; 82   : 		
; 83   : 	getchar();

	mov	esi, esp
	call	DWORD PTR __imp__getchar
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : 	return 0;

	xor	eax, eax

; 85   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _test_fibonacci
_TEXT	SEGMENT
_err$ = -32						; size = 4
_i$ = -20						; size = 4
_n$ = -8						; size = 4
_test_fibonacci PROC					; COMDAT

; 522  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 523  : 	unsigned n = 30;

	mov	DWORD PTR _n$[ebp], 30			; 0000001eH

; 524  : 	unsigned i;
; 525  : 	int err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 526  : 	for (i=0;  i < n;  i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@test_fibon
$LN4@test_fibon:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@test_fibon:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jae	SHORT $LN3@test_fibon

; 527  : 		if ( fibonacci(i) != fibonacci_c(i) ) {

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_fibonacci
	add	esp, 4
	mov	esi, eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fibonacci_c
	add	esp, 4
	cmp	esi, eax
	je	SHORT $LN2@test_fibon

; 528  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1

; 529  : 			printf(ANSI_COLOR_RED "Test failed. Fibonacci(%d): expected %d, got %d\n" ANSI_COLOR_RESET, i, fibonacci_c(i), fibonacci(i));

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_fibonacci
	add	esp, 4
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_fibonacci_c
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0DK@LMNONIFK@?$BL?$FL31mTest?5failed?4?5Fibonacci?$CI?$CFd?$CJ?3@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@test_fibon:

; 530  : 		}
; 531  : 	}

	jmp	SHORT $LN4@test_fibon
$LN3@test_fibon:

; 532  : 
; 533  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 534  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN6@test_fibon

; 535  : 		printf(ANSI_COLOR_GREEN "Test passed.\n" ANSI_COLOR_RESET );

	mov	esi, esp
	push	OFFSET ??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 536  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax
$LN6@test_fibon:

; 537  : 	}
; 538  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_test_fibonacci ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _test_changeCase
_TEXT	SEGMENT
_expected_arrayOfLetters3$ = -204			; size = 10
_expected_arrayOfLetters2$ = -184			; size = 35
_expected_arrayOfLetters1$ = -140			; size = 21
_arrayOfLetters3$ = -108				; size = 10
_arrayOfLetters2$ = -88					; size = 35
_arrayOfLetters1$ = -44					; size = 21
_i$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_test_changeCase PROC					; COMDAT

; 437  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 400				; 00000190H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-400]
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 438  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 439  : 
; 440  : 	char arrayOfLetters1[ 21 ] = {'T', 'h', 'i', 's', 'I', 's', 'T', 'h', 'e', 'F', 'i', 'n', 'a', 'l', 'L', 'a', 'b', 'O', 'f', '5', '1'};

	mov	BYTE PTR _arrayOfLetters1$[ebp], 84	; 00000054H
	mov	BYTE PTR _arrayOfLetters1$[ebp+1], 104	; 00000068H
	mov	BYTE PTR _arrayOfLetters1$[ebp+2], 105	; 00000069H
	mov	BYTE PTR _arrayOfLetters1$[ebp+3], 115	; 00000073H
	mov	BYTE PTR _arrayOfLetters1$[ebp+4], 73	; 00000049H
	mov	BYTE PTR _arrayOfLetters1$[ebp+5], 115	; 00000073H
	mov	BYTE PTR _arrayOfLetters1$[ebp+6], 84	; 00000054H
	mov	BYTE PTR _arrayOfLetters1$[ebp+7], 104	; 00000068H
	mov	BYTE PTR _arrayOfLetters1$[ebp+8], 101	; 00000065H
	mov	BYTE PTR _arrayOfLetters1$[ebp+9], 70	; 00000046H
	mov	BYTE PTR _arrayOfLetters1$[ebp+10], 105	; 00000069H
	mov	BYTE PTR _arrayOfLetters1$[ebp+11], 110	; 0000006eH
	mov	BYTE PTR _arrayOfLetters1$[ebp+12], 97	; 00000061H
	mov	BYTE PTR _arrayOfLetters1$[ebp+13], 108	; 0000006cH
	mov	BYTE PTR _arrayOfLetters1$[ebp+14], 76	; 0000004cH
	mov	BYTE PTR _arrayOfLetters1$[ebp+15], 97	; 00000061H
	mov	BYTE PTR _arrayOfLetters1$[ebp+16], 98	; 00000062H
	mov	BYTE PTR _arrayOfLetters1$[ebp+17], 79	; 0000004fH
	mov	BYTE PTR _arrayOfLetters1$[ebp+18], 102	; 00000066H
	mov	BYTE PTR _arrayOfLetters1$[ebp+19], 53	; 00000035H
	mov	BYTE PTR _arrayOfLetters1$[ebp+20], 49	; 00000031H

; 441  : 	char arrayOfLetters2[ 35 ] = {'i', 'A', 'M', 'o', 'n', 'A', 's', 'e', 'a', 'f', 'o', 'o', 'd', 'D', 'I', 'E', 'T', '.', 'I', 's', 'e', 'e', 'F', 'O', 'O', 'D', 'a', 'n', 'd', 'I', 'e', 'a', 't', 'I', 'T'};

	mov	BYTE PTR _arrayOfLetters2$[ebp], 105	; 00000069H
	mov	BYTE PTR _arrayOfLetters2$[ebp+1], 65	; 00000041H
	mov	BYTE PTR _arrayOfLetters2$[ebp+2], 77	; 0000004dH
	mov	BYTE PTR _arrayOfLetters2$[ebp+3], 111	; 0000006fH
	mov	BYTE PTR _arrayOfLetters2$[ebp+4], 110	; 0000006eH
	mov	BYTE PTR _arrayOfLetters2$[ebp+5], 65	; 00000041H
	mov	BYTE PTR _arrayOfLetters2$[ebp+6], 115	; 00000073H
	mov	BYTE PTR _arrayOfLetters2$[ebp+7], 101	; 00000065H
	mov	BYTE PTR _arrayOfLetters2$[ebp+8], 97	; 00000061H
	mov	BYTE PTR _arrayOfLetters2$[ebp+9], 102	; 00000066H
	mov	BYTE PTR _arrayOfLetters2$[ebp+10], 111	; 0000006fH
	mov	BYTE PTR _arrayOfLetters2$[ebp+11], 111	; 0000006fH
	mov	BYTE PTR _arrayOfLetters2$[ebp+12], 100	; 00000064H
	mov	BYTE PTR _arrayOfLetters2$[ebp+13], 68	; 00000044H
	mov	BYTE PTR _arrayOfLetters2$[ebp+14], 73	; 00000049H
	mov	BYTE PTR _arrayOfLetters2$[ebp+15], 69	; 00000045H
	mov	BYTE PTR _arrayOfLetters2$[ebp+16], 84	; 00000054H
	mov	BYTE PTR _arrayOfLetters2$[ebp+17], 46	; 0000002eH
	mov	BYTE PTR _arrayOfLetters2$[ebp+18], 73	; 00000049H
	mov	BYTE PTR _arrayOfLetters2$[ebp+19], 115	; 00000073H
	mov	BYTE PTR _arrayOfLetters2$[ebp+20], 101	; 00000065H
	mov	BYTE PTR _arrayOfLetters2$[ebp+21], 101	; 00000065H
	mov	BYTE PTR _arrayOfLetters2$[ebp+22], 70	; 00000046H
	mov	BYTE PTR _arrayOfLetters2$[ebp+23], 79	; 0000004fH
	mov	BYTE PTR _arrayOfLetters2$[ebp+24], 79	; 0000004fH
	mov	BYTE PTR _arrayOfLetters2$[ebp+25], 68	; 00000044H
	mov	BYTE PTR _arrayOfLetters2$[ebp+26], 97	; 00000061H
	mov	BYTE PTR _arrayOfLetters2$[ebp+27], 110	; 0000006eH
	mov	BYTE PTR _arrayOfLetters2$[ebp+28], 100	; 00000064H
	mov	BYTE PTR _arrayOfLetters2$[ebp+29], 73	; 00000049H
	mov	BYTE PTR _arrayOfLetters2$[ebp+30], 101	; 00000065H
	mov	BYTE PTR _arrayOfLetters2$[ebp+31], 97	; 00000061H
	mov	BYTE PTR _arrayOfLetters2$[ebp+32], 116	; 00000074H
	mov	BYTE PTR _arrayOfLetters2$[ebp+33], 73	; 00000049H
	mov	BYTE PTR _arrayOfLetters2$[ebp+34], 84	; 00000054H

; 442  : 	char arrayOfLetters3[ 10 ] = {'1', '2', '3', '4', 'A', '5', '6', '7', '8', '9'};

	mov	BYTE PTR _arrayOfLetters3$[ebp], 49	; 00000031H
	mov	BYTE PTR _arrayOfLetters3$[ebp+1], 50	; 00000032H
	mov	BYTE PTR _arrayOfLetters3$[ebp+2], 51	; 00000033H
	mov	BYTE PTR _arrayOfLetters3$[ebp+3], 52	; 00000034H
	mov	BYTE PTR _arrayOfLetters3$[ebp+4], 65	; 00000041H
	mov	BYTE PTR _arrayOfLetters3$[ebp+5], 53	; 00000035H
	mov	BYTE PTR _arrayOfLetters3$[ebp+6], 54	; 00000036H
	mov	BYTE PTR _arrayOfLetters3$[ebp+7], 55	; 00000037H
	mov	BYTE PTR _arrayOfLetters3$[ebp+8], 56	; 00000038H
	mov	BYTE PTR _arrayOfLetters3$[ebp+9], 57	; 00000039H

; 443  : 
; 444  : 	char expected_arrayOfLetters1[ 21 ] = {'t', 'H', 'I', 'S', 'i', 'S', 't', 'H', 'E', 'f', 'I', 'N', 'A', 'L', 'l', 'A', 'B', 'o', 'F', '5', '1'};

	mov	BYTE PTR _expected_arrayOfLetters1$[ebp], 116 ; 00000074H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+1], 72 ; 00000048H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+2], 73 ; 00000049H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+3], 83 ; 00000053H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+4], 105 ; 00000069H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+5], 83 ; 00000053H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+6], 116 ; 00000074H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+7], 72 ; 00000048H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+8], 69 ; 00000045H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+9], 102 ; 00000066H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+10], 73 ; 00000049H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+11], 78 ; 0000004eH
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+12], 65 ; 00000041H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+13], 76 ; 0000004cH
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+14], 108 ; 0000006cH
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+15], 65 ; 00000041H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+16], 66 ; 00000042H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+17], 111 ; 0000006fH
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+18], 70 ; 00000046H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+19], 53 ; 00000035H
	mov	BYTE PTR _expected_arrayOfLetters1$[ebp+20], 49 ; 00000031H

; 445  : 	char expected_arrayOfLetters2[ 35 ] = {'I', 'a', 'm', 'O', 'N', 'a', 'S', 'E', 'A', 'F', 'O', 'O', 'D', 'd', 'i', 'e', 't', '.', 'i', 'S', 'E', 'E', 'f', 'o', 'o', 'd', 'A', 'N', 'D', 'i', 'E', 'A', 'T', 'i', 't'};

	mov	BYTE PTR _expected_arrayOfLetters2$[ebp], 73 ; 00000049H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+1], 97 ; 00000061H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+2], 109 ; 0000006dH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+3], 79 ; 0000004fH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+4], 78 ; 0000004eH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+5], 97 ; 00000061H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+6], 83 ; 00000053H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+7], 69 ; 00000045H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+8], 65 ; 00000041H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+9], 70 ; 00000046H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+10], 79 ; 0000004fH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+11], 79 ; 0000004fH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+12], 68 ; 00000044H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+13], 100 ; 00000064H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+14], 105 ; 00000069H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+15], 101 ; 00000065H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+16], 116 ; 00000074H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+17], 46 ; 0000002eH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+18], 105 ; 00000069H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+19], 83 ; 00000053H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+20], 69 ; 00000045H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+21], 69 ; 00000045H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+22], 102 ; 00000066H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+23], 111 ; 0000006fH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+24], 111 ; 0000006fH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+25], 100 ; 00000064H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+26], 65 ; 00000041H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+27], 78 ; 0000004eH
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+28], 68 ; 00000044H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+29], 105 ; 00000069H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+30], 69 ; 00000045H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+31], 65 ; 00000041H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+32], 84 ; 00000054H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+33], 105 ; 00000069H
	mov	BYTE PTR _expected_arrayOfLetters2$[ebp+34], 116 ; 00000074H

; 446  : 	char expected_arrayOfLetters3[ 10 ] = {'1', '2', '3', '4', 'a', '5', '6', '7', '8', '9'};

	mov	BYTE PTR _expected_arrayOfLetters3$[ebp], 49 ; 00000031H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+1], 50 ; 00000032H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+2], 51 ; 00000033H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+3], 52 ; 00000034H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+4], 97 ; 00000061H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+5], 53 ; 00000035H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+6], 54 ; 00000036H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+7], 55 ; 00000037H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+8], 56 ; 00000038H
	mov	BYTE PTR _expected_arrayOfLetters3$[ebp+9], 57 ; 00000039H

; 447  : 
; 448  : 	for(i=0; i<21; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@test_chang
$LN23@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@test_chang:
	cmp	DWORD PTR _i$[ebp], 21			; 00000015H
	jge	SHORT $LN22@test_chang

; 449  : 		printf("%c", arrayOfLetters1[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters1$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 450  : 	}

	jmp	SHORT $LN23@test_chang
$LN22@test_chang:

; 451  : 	printf(" ==> ");

	mov	esi, esp
	push	OFFSET ??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 452  : 
; 453  : 	changeCase(arrayOfLetters1, 21);

	push	21					; 00000015H
	lea	eax, DWORD PTR _arrayOfLetters1$[ebp]
	push	eax
	call	_changeCase
	add	esp, 8

; 454  : 
; 455  : 	for(i=0; i<21; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@test_chang
$LN20@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@test_chang:
	cmp	DWORD PTR _i$[ebp], 21			; 00000015H
	jge	SHORT $LN19@test_chang

; 456  : 		printf("%c", arrayOfLetters1[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters1$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 457  : 	}

	jmp	SHORT $LN20@test_chang
$LN19@test_chang:

; 458  : 
; 459  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 460  : 	if (!memcmp(arrayOfLetters1, expected_arrayOfLetters1, 21)){

	push	21					; 00000015H
	lea	eax, DWORD PTR _expected_arrayOfLetters1$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfLetters1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@test_chang

; 461  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 462  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 463  : 	}
; 464  : 	else{

	jmp	SHORT $LN17@test_chang
$LN18@test_chang:

; 465  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@test_chang:

; 466  : 	}
; 467  : 
; 468  : 
; 469  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 470  : 	for(i=0; i<35; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@test_chang
$LN15@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@test_chang:
	cmp	DWORD PTR _i$[ebp], 35			; 00000023H
	jge	SHORT $LN14@test_chang

; 471  : 		printf("%c", arrayOfLetters2[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters2$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 472  : 	}

	jmp	SHORT $LN15@test_chang
$LN14@test_chang:

; 473  : 	printf(" ==> ");

	mov	esi, esp
	push	OFFSET ??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 474  : 
; 475  : 	changeCase(arrayOfLetters2, 35);

	push	35					; 00000023H
	lea	eax, DWORD PTR _arrayOfLetters2$[ebp]
	push	eax
	call	_changeCase
	add	esp, 8

; 476  : 
; 477  : 	for(i=0; i<35; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN13@test_chang
$LN12@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN13@test_chang:
	cmp	DWORD PTR _i$[ebp], 35			; 00000023H
	jge	SHORT $LN11@test_chang

; 478  : 		printf("%c", arrayOfLetters2[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters2$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 479  : 	}

	jmp	SHORT $LN12@test_chang
$LN11@test_chang:

; 480  : 
; 481  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 482  : 	if (!memcmp(arrayOfLetters2, expected_arrayOfLetters2, 35)){

	push	35					; 00000023H
	lea	eax, DWORD PTR _expected_arrayOfLetters2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfLetters2$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@test_chang

; 483  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 484  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 485  : 	}
; 486  : 	else

	jmp	SHORT $LN9@test_chang
$LN10@test_chang:

; 487  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@test_chang:

; 488  : 
; 489  : 
; 490  : 
; 491  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 492  : 	for(i=0; i<10; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@test_chang
$LN7@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN8@test_chang:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN6@test_chang

; 493  : 		printf("%c", arrayOfLetters3[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters3$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 494  : 	}

	jmp	SHORT $LN7@test_chang
$LN6@test_chang:

; 495  : 	printf(" ==> ");

	mov	esi, esp
	push	OFFSET ??_C@_05KJBAOLBJ@?5?$DN?$DN?$DO?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 496  : 
; 497  : 	changeCase(arrayOfLetters3, 10);

	push	10					; 0000000aH
	lea	eax, DWORD PTR _arrayOfLetters3$[ebp]
	push	eax
	call	_changeCase
	add	esp, 8

; 498  : 
; 499  : 	for(i=0; i<10; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@test_chang
$LN4@test_chang:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@test_chang:
	cmp	DWORD PTR _i$[ebp], 10			; 0000000aH
	jge	SHORT $LN3@test_chang

; 500  : 		printf("%c", arrayOfLetters3[i]);

	mov	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR _arrayOfLetters3$[ebp+eax]
	mov	esi, esp
	push	ecx
	push	OFFSET ??_C@_02HAOIJKIC@?$CFc?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 501  : 	}

	jmp	SHORT $LN4@test_chang
$LN3@test_chang:

; 502  : 
; 503  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 504  : 	if (!memcmp(arrayOfLetters3, expected_arrayOfLetters3, 10)){

	push	10					; 0000000aH
	lea	eax, DWORD PTR _expected_arrayOfLetters3$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfLetters3$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN2@test_chang

; 505  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 506  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 507  : 	}
; 508  : 	else{

	jmp	SHORT $LN25@test_chang
$LN2@test_chang:

; 509  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@test_chang:

; 510  : 	}
; 511  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@test_chang
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 400				; 00000190H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN34@test_chang:
	DD	6
	DD	$LN33@test_chang
$LN33@test_chang:
	DD	-44					; ffffffd4H
	DD	21					; 00000015H
	DD	$LN27@test_chang
	DD	-88					; ffffffa8H
	DD	35					; 00000023H
	DD	$LN28@test_chang
	DD	-108					; ffffff94H
	DD	10					; 0000000aH
	DD	$LN29@test_chang
	DD	-140					; ffffff74H
	DD	21					; 00000015H
	DD	$LN30@test_chang
	DD	-184					; ffffff48H
	DD	35					; 00000023H
	DD	$LN31@test_chang
	DD	-204					; ffffff34H
	DD	10					; 0000000aH
	DD	$LN32@test_chang
$LN32@test_chang:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	51					; 00000033H
	DB	0
$LN31@test_chang:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN30@test_chang:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
$LN29@test_chang:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	51					; 00000033H
	DB	0
$LN28@test_chang:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN27@test_chang:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
_test_changeCase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _test_vectorOperations
_TEXT	SEGMENT
_expected_output_array$ = -276				; size = 40
_output_array$ = -228					; size = 40
_second_array$ = -180					; size = 40
_first_array$ = -132					; size = 40
_operation_array$ = -84					; size = 40
_number_of_elements$ = -36				; size = 4
_i$ = -24						; size = 4
_err$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_test_vectorOperations PROC				; COMDAT

; 408  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 409  : 	int err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 410  : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 411  : 
; 412  : 	int number_of_elements = 10;

	mov	DWORD PTR _number_of_elements$[ebp], 10	; 0000000aH

; 413  : 	int operation_array[] = {1, 2, 1, 4, 1, 2, 4, 3, 3, 0};

	mov	DWORD PTR _operation_array$[ebp], 1
	mov	DWORD PTR _operation_array$[ebp+4], 2
	mov	DWORD PTR _operation_array$[ebp+8], 1
	mov	DWORD PTR _operation_array$[ebp+12], 4
	mov	DWORD PTR _operation_array$[ebp+16], 1
	mov	DWORD PTR _operation_array$[ebp+20], 2
	mov	DWORD PTR _operation_array$[ebp+24], 4
	mov	DWORD PTR _operation_array$[ebp+28], 3
	mov	DWORD PTR _operation_array$[ebp+32], 3
	mov	DWORD PTR _operation_array$[ebp+36], 0

; 414  : 	int first_array[] = {10, 9, 8, 7, 6, 5, 4, 3, 2, 182 };

	mov	DWORD PTR _first_array$[ebp], 10	; 0000000aH
	mov	DWORD PTR _first_array$[ebp+4], 9
	mov	DWORD PTR _first_array$[ebp+8], 8
	mov	DWORD PTR _first_array$[ebp+12], 7
	mov	DWORD PTR _first_array$[ebp+16], 6
	mov	DWORD PTR _first_array$[ebp+20], 5
	mov	DWORD PTR _first_array$[ebp+24], 4
	mov	DWORD PTR _first_array$[ebp+28], 3
	mov	DWORD PTR _first_array$[ebp+32], 2
	mov	DWORD PTR _first_array$[ebp+36], 182	; 000000b6H

; 415  : 	int second_array[] = {-3, 14, 5674, 289, - 89, 234, 54, 234, 98, 71} ;

	mov	DWORD PTR _second_array$[ebp], -3	; fffffffdH
	mov	DWORD PTR _second_array$[ebp+4], 14	; 0000000eH
	mov	DWORD PTR _second_array$[ebp+8], 5674	; 0000162aH
	mov	DWORD PTR _second_array$[ebp+12], 289	; 00000121H
	mov	DWORD PTR _second_array$[ebp+16], -89	; ffffffa7H
	mov	DWORD PTR _second_array$[ebp+20], 234	; 000000eaH
	mov	DWORD PTR _second_array$[ebp+24], 54	; 00000036H
	mov	DWORD PTR _second_array$[ebp+28], 234	; 000000eaH
	mov	DWORD PTR _second_array$[ebp+32], 98	; 00000062H
	mov	DWORD PTR _second_array$[ebp+36], 71	; 00000047H

; 416  : 	int output_array[10];
; 417  : 	int expected_output_array[10];
; 418  : 
; 419  : 	vectorOperations(number_of_elements, first_array, second_array, operation_array, output_array);

	lea	eax, DWORD PTR _output_array$[ebp]
	push	eax
	lea	ecx, DWORD PTR _operation_array$[ebp]
	push	ecx
	lea	edx, DWORD PTR _second_array$[ebp]
	push	edx
	lea	eax, DWORD PTR _first_array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_of_elements$[ebp]
	push	ecx
	call	_vectorOperations
	add	esp, 20					; 00000014H

; 420  : 	vectorOperations_c(number_of_elements, first_array, second_array, operation_array, expected_output_array);

	lea	eax, DWORD PTR _expected_output_array$[ebp]
	push	eax
	lea	ecx, DWORD PTR _operation_array$[ebp]
	push	ecx
	lea	edx, DWORD PTR _second_array$[ebp]
	push	edx
	lea	eax, DWORD PTR _first_array$[ebp]
	push	eax
	mov	ecx, DWORD PTR _number_of_elements$[ebp]
	push	ecx
	call	_vectorOperations_c
	add	esp, 20					; 00000014H

; 421  : 
; 422  : 	for (i=0; i<number_of_elements; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@test_vecto
$LN4@test_vecto:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@test_vecto:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _number_of_elements$[ebp]
	jge	SHORT $LN3@test_vecto

; 423  : 		if (output_array[i] != expected_output_array[i]) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _output_array$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_output_array$[ebp+ecx*4]
	je	SHORT $LN2@test_vecto

; 424  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1

; 425  : 			printf(ANSI_COLOR_RED "Test failed at index %d: expected %d, got %d\n" ANSI_COLOR_RESET, i, expected_output_array[i], output_array[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _output_array$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _expected_output_array$[ebp+edx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DH@KJPDLMMI@?$BL?$FL31mTest?5failed?5at?5index?5?$CFd?3?5ex@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@test_vecto:

; 426  : 		}
; 427  : 	}

	jmp	SHORT $LN4@test_vecto
$LN3@test_vecto:

; 428  : 	
; 429  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 430  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN6@test_vecto

; 431  : 		printf(ANSI_COLOR_GREEN "Test passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 432  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax
$LN6@test_vecto:

; 433  : 	}
; 434  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@test_vecto
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@test_vecto:
	DD	5
	DD	$LN13@test_vecto
$LN13@test_vecto:
	DD	-84					; ffffffacH
	DD	40					; 00000028H
	DD	$LN8@test_vecto
	DD	-132					; ffffff7cH
	DD	40					; 00000028H
	DD	$LN9@test_vecto
	DD	-180					; ffffff4cH
	DD	40					; 00000028H
	DD	$LN10@test_vecto
	DD	-228					; ffffff1cH
	DD	40					; 00000028H
	DD	$LN11@test_vecto
	DD	-276					; fffffeecH
	DD	40					; 00000028H
	DD	$LN12@test_vecto
$LN12@test_vecto:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN11@test_vecto:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN10@test_vecto:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN9@test_vecto:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
$LN8@test_vecto:
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	0
_test_vectorOperations ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _test_factorial
_TEXT	SEGMENT
_err$ = -48						; size = 4
_i$ = -36						; size = 4
_result$ = -24						; size = 4
_n$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_test_factorial PROC					; COMDAT

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 364  : 	int n = 12;

	mov	DWORD PTR _n$[ebp], 12			; 0000000cH

; 365  : 	unsigned int result = 3;

	mov	DWORD PTR _result$[ebp], 3

; 366  : 	int i;
; 367  : 	int err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 368  : 	for (i=0;  i < n;  i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@test_facto
$LN4@test_facto:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN5@test_facto:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _n$[ebp]
	jge	SHORT $LN3@test_facto

; 369  : 		factorial(i, &result);

	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_factorial
	add	esp, 8

; 370  : 		if ( result != factorial_c(i) ) {

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	_factorial_c
	add	esp, 4
	cmp	DWORD PTR _result$[ebp], eax
	je	SHORT $LN2@test_facto

; 371  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1

; 372  : 			printf(ANSI_COLOR_RED "Test failed. Factorial(%d): expected %d, got %d\n" ANSI_COLOR_RESET, i, factorial_c(i), result);

	mov	esi, esp
	mov	eax, DWORD PTR _result$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	call	_factorial_c
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	push	OFFSET ??_C@_0DK@MGPNABKM@?$BL?$FL31mTest?5failed?4?5Factorial?$CI?$CFd?$CJ?3@
	call	DWORD PTR __imp__printf
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@test_facto:

; 373  : 		}
; 374  : 	}

	jmp	SHORT $LN4@test_facto
$LN3@test_facto:

; 375  : 
; 376  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 377  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN6@test_facto

; 378  : 		printf(ANSI_COLOR_GREEN "Test passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BH@INEAPEJB@?$BL?$FL32mTest?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 379  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax
$LN6@test_facto:

; 380  : 	}
; 381  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@test_facto
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@test_facto:
	DD	1
	DD	$LN9@test_facto
$LN9@test_facto:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN8@test_facto
$LN8@test_facto:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
_test_factorial ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\brian\documents\dropbox\projects\ics51_lab3\ics51_lab3\lab3-testing.c
;	COMDAT _test_selectionSort
_TEXT	SEGMENT
_num_elements$ = -524					; size = 4
_err$ = -512						; size = 4
_i$ = -500						; size = 4
_expected_arrayOfNumbers6$ = -488			; size = 4
_expected_arrayOfNumbers5$ = -476			; size = 8
_expected_arrayOfNumbers4$ = -460			; size = 4
_expected_arrayOfNumbers3$ = -448			; size = 60
_expected_arrayOfNumbers2$ = -380			; size = 60
_expected_arrayOfNumbers1$ = -312			; size = 60
_arrayOfNumbers6$ = -244				; size = 4
_arrayOfNumbers5$ = -232				; size = 8
_arrayOfNumbers4$ = -216				; size = 4
_arrayOfNumbers3$ = -204				; size = 60
_arrayOfNumbers2$ = -136				; size = 60
_arrayOfNumbers1$ = -68					; size = 60
__$ArrayPad$ = -4					; size = 4
_test_selectionSort PROC				; COMDAT

; 125  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 720				; 000002d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-720]
	mov	ecx, 180				; 000000b4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 126  : 	int arrayOfNumbers1[ 15 ] = {4, 5, 1, 222, 5, 5, 33, 11, -4, 12, -333, 10, -28349, 74, 323232};

	mov	DWORD PTR _arrayOfNumbers1$[ebp], 4
	mov	DWORD PTR _arrayOfNumbers1$[ebp+4], 5
	mov	DWORD PTR _arrayOfNumbers1$[ebp+8], 1
	mov	DWORD PTR _arrayOfNumbers1$[ebp+12], 222 ; 000000deH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+16], 5
	mov	DWORD PTR _arrayOfNumbers1$[ebp+20], 5
	mov	DWORD PTR _arrayOfNumbers1$[ebp+24], 33	; 00000021H
	mov	DWORD PTR _arrayOfNumbers1$[ebp+28], 11	; 0000000bH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+32], -4	; fffffffcH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+36], 12	; 0000000cH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+40], -333 ; fffffeb3H
	mov	DWORD PTR _arrayOfNumbers1$[ebp+44], 10	; 0000000aH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+48], -28349 ; ffff9143H
	mov	DWORD PTR _arrayOfNumbers1$[ebp+52], 74	; 0000004aH
	mov	DWORD PTR _arrayOfNumbers1$[ebp+56], 323232 ; 0004eea0H

; 127  : 	int arrayOfNumbers2[ 15 ] = {+32131, +432, +232, +4, -1, -4, -5, -7, -8, -8, -9, -100000, -200000, -300000, -9999999};

	mov	DWORD PTR _arrayOfNumbers2$[ebp], 32131	; 00007d83H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+4], 432	; 000001b0H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+8], 232	; 000000e8H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+12], 4
	mov	DWORD PTR _arrayOfNumbers2$[ebp+16], -1
	mov	DWORD PTR _arrayOfNumbers2$[ebp+20], -4	; fffffffcH
	mov	DWORD PTR _arrayOfNumbers2$[ebp+24], -5	; fffffffbH
	mov	DWORD PTR _arrayOfNumbers2$[ebp+28], -7	; fffffff9H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+32], -8	; fffffff8H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+36], -8	; fffffff8H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+40], -9	; fffffff7H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+44], -100000 ; fffe7960H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+48], -200000 ; fffcf2c0H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+52], -300000 ; fffb6c20H
	mov	DWORD PTR _arrayOfNumbers2$[ebp+56], -9999999 ; ff676981H

; 128  : 	int arrayOfNumbers3[ 15 ] = {4, -5, 1, -222, 5, -5, 33, -11, -4, 12, -333, 10, +28349, 74, -323232};

	mov	DWORD PTR _arrayOfNumbers3$[ebp], 4
	mov	DWORD PTR _arrayOfNumbers3$[ebp+4], -5	; fffffffbH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+8], 1
	mov	DWORD PTR _arrayOfNumbers3$[ebp+12], -222 ; ffffff22H
	mov	DWORD PTR _arrayOfNumbers3$[ebp+16], 5
	mov	DWORD PTR _arrayOfNumbers3$[ebp+20], -5	; fffffffbH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+24], 33	; 00000021H
	mov	DWORD PTR _arrayOfNumbers3$[ebp+28], -11 ; fffffff5H
	mov	DWORD PTR _arrayOfNumbers3$[ebp+32], -4	; fffffffcH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+36], 12	; 0000000cH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+40], -333 ; fffffeb3H
	mov	DWORD PTR _arrayOfNumbers3$[ebp+44], 10	; 0000000aH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+48], 28349 ; 00006ebdH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+52], 74	; 0000004aH
	mov	DWORD PTR _arrayOfNumbers3$[ebp+56], -323232 ; fffb1160H

; 129  : 	int arrayOfNumbers4[ 1  ] = {100};

	mov	DWORD PTR _arrayOfNumbers4$[ebp], 100	; 00000064H

; 130  : 	int arrayOfNumbers5[ 2  ] = {-10, -100};

	mov	DWORD PTR _arrayOfNumbers5$[ebp], -10	; fffffff6H
	mov	DWORD PTR _arrayOfNumbers5$[ebp+4], -100 ; ffffff9cH

; 131  : 	int *arrayOfNumbers6 = NULL;

	mov	DWORD PTR _arrayOfNumbers6$[ebp], 0

; 132  : 
; 133  : 	int expected_arrayOfNumbers1[ 15 ] = {4, 5, 1, 222, 5, 5, 33, 11, -4, 12, -333, 10, -28349, 74, 323232};

	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp], 4
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+4], 5
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+8], 1
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+12], 222 ; 000000deH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+16], 5
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+20], 5
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+24], 33 ; 00000021H
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+28], 11 ; 0000000bH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+32], -4 ; fffffffcH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+36], 12 ; 0000000cH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+40], -333 ; fffffeb3H
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+44], 10 ; 0000000aH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+48], -28349 ; ffff9143H
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+52], 74 ; 0000004aH
	mov	DWORD PTR _expected_arrayOfNumbers1$[ebp+56], 323232 ; 0004eea0H

; 134  : 	int expected_arrayOfNumbers2[ 15 ] = {+32131, +432, +232, +4, -1, -4, -5, -7, -8, -8, -9, -100000, -200000, -300000, -9999999};

	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp], 32131 ; 00007d83H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+4], 432 ; 000001b0H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+8], 232 ; 000000e8H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+12], 4
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+16], -1
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+20], -4 ; fffffffcH
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+24], -5 ; fffffffbH
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+28], -7 ; fffffff9H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+32], -8 ; fffffff8H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+36], -8 ; fffffff8H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+40], -9 ; fffffff7H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+44], -100000 ; fffe7960H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+48], -200000 ; fffcf2c0H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+52], -300000 ; fffb6c20H
	mov	DWORD PTR _expected_arrayOfNumbers2$[ebp+56], -9999999 ; ff676981H

; 135  : 	int expected_arrayOfNumbers3[ 15 ] = {4, -5, 1, -222, 5, -5, 33, -11, -4, 12, -333, 10, +28349, 74, -323232};

	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp], 4
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+4], -5 ; fffffffbH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+8], 1
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+12], -222 ; ffffff22H
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+16], 5
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+20], -5 ; fffffffbH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+24], 33 ; 00000021H
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+28], -11 ; fffffff5H
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+32], -4 ; fffffffcH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+36], 12 ; 0000000cH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+40], -333 ; fffffeb3H
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+44], 10 ; 0000000aH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+48], 28349 ; 00006ebdH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+52], 74 ; 0000004aH
	mov	DWORD PTR _expected_arrayOfNumbers3$[ebp+56], -323232 ; fffb1160H

; 136  : 	int expected_arrayOfNumbers4[ 1  ] = {100};

	mov	DWORD PTR _expected_arrayOfNumbers4$[ebp], 100 ; 00000064H

; 137  : 	int expected_arrayOfNumbers5[ 2  ] = {-100, -10};

	mov	DWORD PTR _expected_arrayOfNumbers5$[ebp], -100 ; ffffff9cH
	mov	DWORD PTR _expected_arrayOfNumbers5$[ebp+4], -10 ; fffffff6H

; 138  : 	int *expected_arrayOfNumbers6 = NULL;

	mov	DWORD PTR _expected_arrayOfNumbers6$[ebp], 0

; 139  : 		
; 140  : 	int i;
; 141  : 	int err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 142  : 
; 143  : 	int num_elements = 15;

	mov	DWORD PTR _num_elements$[ebp], 15	; 0000000fH

; 144  : 	printf("Original array was:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@JNHJCPMF@Original?5array?5was?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 
; 146  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN72@test_selec
$LN71@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN72@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN70@test_selec

; 147  : 		printf("%d ", arrayOfNumbers1[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers1$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 148  : 	}

	jmp	SHORT $LN71@test_selec
$LN70@test_selec:

; 149  : 
; 150  : 	selectionSort(arrayOfNumbers1, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfNumbers1$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 151  : 	selectionSort_c(expected_arrayOfNumbers1, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _expected_arrayOfNumbers1$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 152  : 
; 153  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 154  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN69@test_selec
$LN68@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN69@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN67@test_selec

; 155  : 		printf("%d ", expected_arrayOfNumbers1[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers1$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 156  : 	}

	jmp	SHORT $LN68@test_selec
$LN67@test_selec:

; 157  : 
; 158  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 159  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 160  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN66@test_selec
$LN65@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN66@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN64@test_selec

; 161  : 		printf("%d ", arrayOfNumbers1[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers1$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  : 		if (arrayOfNumbers1[i] != expected_arrayOfNumbers1[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _arrayOfNumbers1$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_arrayOfNumbers1$[ebp+ecx*4]
	je	SHORT $LN63@test_selec

; 163  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN63@test_selec:

; 164  : 		}
; 165  : 	}

	jmp	SHORT $LN65@test_selec
$LN64@test_selec:

; 166  : 
; 167  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 168  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN62@test_selec

; 169  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 170  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 171  : 	}
; 172  : 	else{

	jmp	SHORT $LN61@test_selec
$LN62@test_selec:

; 173  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN61@test_selec:

; 174  : 	}
; 175  : 
; 176  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 177  : 
; 178  : 	printf("\nOriginal array was:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 179  : 
; 180  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN60@test_selec
$LN59@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN60@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN58@test_selec

; 181  : 		printf("%d ", arrayOfNumbers2[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers2$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 182  : 	}

	jmp	SHORT $LN59@test_selec
$LN58@test_selec:

; 183  : 
; 184  : 	selectionSort(arrayOfNumbers2, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfNumbers2$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 185  : 	selectionSort_c(expected_arrayOfNumbers2, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _expected_arrayOfNumbers2$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 186  : 
; 187  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 188  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN57@test_selec
$LN56@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN57@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN55@test_selec

; 189  : 		printf("%d ", expected_arrayOfNumbers2[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers2$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 190  : 	}

	jmp	SHORT $LN56@test_selec
$LN55@test_selec:

; 191  : 
; 192  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 193  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 194  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN54@test_selec
$LN53@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN54@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN52@test_selec

; 195  : 		printf("%d ", arrayOfNumbers2[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers2$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 196  : 		if (arrayOfNumbers2[i] != expected_arrayOfNumbers2[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _arrayOfNumbers2$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_arrayOfNumbers2$[ebp+ecx*4]
	je	SHORT $LN51@test_selec

; 197  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN51@test_selec:

; 198  : 		}
; 199  : 	}

	jmp	SHORT $LN53@test_selec
$LN52@test_selec:

; 200  : 
; 201  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 202  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN50@test_selec

; 203  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 204  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 205  : 	}
; 206  : 	else{

	jmp	SHORT $LN49@test_selec
$LN50@test_selec:

; 207  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN49@test_selec:

; 208  : 	}
; 209  : 
; 210  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 211  : 	
; 212  : 	printf("\nOriginal array was:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 213  : 
; 214  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN48@test_selec
$LN47@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN48@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN46@test_selec

; 215  : 		printf("%d ", arrayOfNumbers3[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers3$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 216  : 	}

	jmp	SHORT $LN47@test_selec
$LN46@test_selec:

; 217  : 
; 218  : 	selectionSort(arrayOfNumbers3, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfNumbers3$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 219  : 	selectionSort_c(expected_arrayOfNumbers3, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _expected_arrayOfNumbers3$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 220  : 
; 221  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN45@test_selec
$LN44@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN45@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN43@test_selec

; 223  : 		printf("%d ", expected_arrayOfNumbers3[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers3$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : 	}

	jmp	SHORT $LN44@test_selec
$LN43@test_selec:

; 225  : 
; 226  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 227  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 228  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN42@test_selec
$LN41@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN42@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN40@test_selec

; 229  : 		printf("%d ", arrayOfNumbers3[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers3$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 230  : 		if (arrayOfNumbers3[i] != expected_arrayOfNumbers3[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _arrayOfNumbers3$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_arrayOfNumbers3$[ebp+ecx*4]
	je	SHORT $LN39@test_selec

; 231  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN39@test_selec:

; 232  : 		}
; 233  : 	}

	jmp	SHORT $LN41@test_selec
$LN40@test_selec:

; 234  : 
; 235  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 236  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN38@test_selec

; 237  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 238  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 239  : 	}
; 240  : 	else{

	jmp	SHORT $LN37@test_selec
$LN38@test_selec:

; 241  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN37@test_selec:

; 242  : 	}
; 243  : 
; 244  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 245  : 	
; 246  : 	num_elements = 1;

	mov	DWORD PTR _num_elements$[ebp], 1

; 247  : 	printf("\nOriginal array was:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 248  : 
; 249  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN36@test_selec
$LN35@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN36@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN34@test_selec

; 250  : 		printf("%d ", arrayOfNumbers4[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers4$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 251  : 	}

	jmp	SHORT $LN35@test_selec
$LN34@test_selec:

; 252  : 
; 253  : 	selectionSort(arrayOfNumbers4, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfNumbers4$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 254  : 	selectionSort_c(expected_arrayOfNumbers4, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _expected_arrayOfNumbers4$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 255  : 
; 256  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 257  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@test_selec
$LN32@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN33@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN31@test_selec

; 258  : 		printf("%d ", expected_arrayOfNumbers4[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers4$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  : 	}

	jmp	SHORT $LN32@test_selec
$LN31@test_selec:

; 260  : 
; 261  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 262  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 263  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN30@test_selec
$LN29@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN30@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN28@test_selec

; 264  : 		printf("%d ", arrayOfNumbers4[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers4$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  : 		if (arrayOfNumbers4[i] != expected_arrayOfNumbers4[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _arrayOfNumbers4$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_arrayOfNumbers4$[ebp+ecx*4]
	je	SHORT $LN27@test_selec

; 266  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN27@test_selec:

; 267  : 		}
; 268  : 	}

	jmp	SHORT $LN29@test_selec
$LN28@test_selec:

; 269  : 
; 270  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 271  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN26@test_selec

; 272  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 273  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 274  : 	}
; 275  : 	else{

	jmp	SHORT $LN25@test_selec
$LN26@test_selec:

; 276  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@test_selec:

; 277  : 	}
; 278  : 
; 279  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 280  : 	
; 281  : 	num_elements = 2;

	mov	DWORD PTR _num_elements$[ebp], 2

; 282  : 	printf("\nOriginal array was:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BG@ODEHLECO@?6Original?5array?5was?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 283  : 
; 284  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN24@test_selec
$LN23@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN22@test_selec

; 285  : 		printf("%d ", arrayOfNumbers5[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers5$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  : 	}

	jmp	SHORT $LN23@test_selec
$LN22@test_selec:

; 287  : 
; 288  : 	selectionSort(arrayOfNumbers5, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _arrayOfNumbers5$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 289  : 	selectionSort_c(expected_arrayOfNumbers5, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _expected_arrayOfNumbers5$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 290  : 
; 291  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 292  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN21@test_selec
$LN20@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN21@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN19@test_selec

; 293  : 		printf("%d ", expected_arrayOfNumbers5[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers5$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 294  : 	}

	jmp	SHORT $LN20@test_selec
$LN19@test_selec:

; 295  : 
; 296  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 297  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 298  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN18@test_selec
$LN17@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN18@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN16@test_selec

; 299  : 		printf("%d ", arrayOfNumbers5[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers5$[ebp+eax*4]
	push	ecx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 300  : 		if (arrayOfNumbers5[i] != expected_arrayOfNumbers5[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _arrayOfNumbers5$[ebp+eax*4]
	cmp	edx, DWORD PTR _expected_arrayOfNumbers5$[ebp+ecx*4]
	je	SHORT $LN15@test_selec

; 301  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN15@test_selec:

; 302  : 		}
; 303  : 	}

	jmp	SHORT $LN17@test_selec
$LN16@test_selec:

; 304  : 
; 305  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 306  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN14@test_selec

; 307  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 308  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 309  : 	}
; 310  : 	else{

	jmp	SHORT $LN13@test_selec
$LN14@test_selec:

; 311  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@test_selec:

; 312  : 	}
; 313  : 
; 314  : 	printf("\n");

	mov	esi, esp
	push	OFFSET ??_C@_01EEMJAFIK@?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 315  : 	
; 316  : 	num_elements = 0;

	mov	DWORD PTR _num_elements$[ebp], 0

; 317  : 	printf("\nOriginal array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@EBKHODNN@?6Original?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 318  : 
; 319  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN12@test_selec
$LN11@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN12@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN10@test_selec

; 320  : 		printf("%d ", arrayOfNumbers6[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers6$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 321  : 	}

	jmp	SHORT $LN11@test_selec
$LN10@test_selec:

; 322  : 
; 323  : 	selectionSort(arrayOfNumbers6, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arrayOfNumbers6$[ebp]
	push	ecx
	call	_selectionSort
	add	esp, 8

; 324  : 	selectionSort_c(expected_arrayOfNumbers6, num_elements);

	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _expected_arrayOfNumbers6$[ebp]
	push	ecx
	call	_selectionSort_c
	add	esp, 8

; 325  : 
; 326  : 	printf("\nSorted array should be:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BK@ENFCJLG@?6Sorted?5array?5should?5be?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 327  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@test_selec
$LN8@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN7@test_selec

; 328  : 		printf("%d ", expected_arrayOfNumbers6[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _expected_arrayOfNumbers6$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 329  : 	}

	jmp	SHORT $LN8@test_selec
$LN7@test_selec:

; 330  : 
; 331  : 	err = 0;

	mov	DWORD PTR _err$[ebp], 0

; 332  : 	printf("\nYour sorted array is:\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BI@KNCICHLD@?6Your?5sorted?5array?5is?3?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 333  : 	for(i=0; i<num_elements; i++){

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@test_selec
$LN5@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@test_selec:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _num_elements$[ebp]
	jge	SHORT $LN4@test_selec

; 334  : 		printf("%d ", arrayOfNumbers6[i]);

	mov	esi, esp
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers6$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	push	OFFSET ??_C@_03JDANDILB@?$CFd?5?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 335  : 		if (arrayOfNumbers6[i] != expected_arrayOfNumbers6[i]){

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _arrayOfNumbers6$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _expected_arrayOfNumbers6$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	je	SHORT $LN3@test_selec

; 336  : 			err = 1;

	mov	DWORD PTR _err$[ebp], 1
$LN3@test_selec:

; 337  : 		}
; 338  : 	}

	jmp	SHORT $LN5@test_selec
$LN4@test_selec:

; 339  : 
; 340  : 	num_of_tests++;

	mov	eax, DWORD PTR _num_of_tests
	add	eax, 1
	mov	DWORD PTR _num_of_tests, eax

; 341  : 	if (!err){

	cmp	DWORD PTR _err$[ebp], 0
	jne	SHORT $LN2@test_selec

; 342  : 		printf(ANSI_COLOR_GREEN "\nTest passed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@EAMIJHJB@?$BL?$FL32m?6Test?5passed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 343  : 		num_of_tests_passed++;

	mov	eax, DWORD PTR _num_of_tests_passed
	add	eax, 1
	mov	DWORD PTR _num_of_tests_passed, eax

; 344  : 	}
; 345  : 	else{

	jmp	SHORT $LN73@test_selec
$LN2@test_selec:

; 346  : 		printf(ANSI_COLOR_RED "\nTest failed.\n" ANSI_COLOR_RESET);

	mov	esi, esp
	push	OFFSET ??_C@_0BI@LFMICKFP@?$BL?$FL31m?6Test?5failed?4?6?$BL?$FL0m?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN73@test_selec:

; 347  : 	}
; 348  : 
; 349  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN86@test_selec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 720				; 000002d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN86@test_selec:
	DD	10					; 0000000aH
	DD	$LN85@test_selec
$LN85@test_selec:
	DD	-68					; ffffffbcH
	DD	60					; 0000003cH
	DD	$LN75@test_selec
	DD	-136					; ffffff78H
	DD	60					; 0000003cH
	DD	$LN76@test_selec
	DD	-204					; ffffff34H
	DD	60					; 0000003cH
	DD	$LN77@test_selec
	DD	-216					; ffffff28H
	DD	4
	DD	$LN78@test_selec
	DD	-232					; ffffff18H
	DD	8
	DD	$LN79@test_selec
	DD	-312					; fffffec8H
	DD	60					; 0000003cH
	DD	$LN80@test_selec
	DD	-380					; fffffe84H
	DD	60					; 0000003cH
	DD	$LN81@test_selec
	DD	-448					; fffffe40H
	DD	60					; 0000003cH
	DD	$LN82@test_selec
	DD	-460					; fffffe34H
	DD	4
	DD	$LN83@test_selec
	DD	-476					; fffffe24H
	DD	8
	DD	$LN84@test_selec
$LN84@test_selec:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	53					; 00000035H
	DB	0
$LN83@test_selec:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	52					; 00000034H
	DB	0
$LN82@test_selec:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	51					; 00000033H
	DB	0
$LN81@test_selec:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN80@test_selec:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	95					; 0000005fH
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
$LN79@test_selec:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	53					; 00000035H
	DB	0
$LN78@test_selec:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	52					; 00000034H
	DB	0
$LN77@test_selec:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	51					; 00000033H
	DB	0
$LN76@test_selec:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
$LN75@test_selec:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	49					; 00000031H
	DB	0
_test_selectionSort ENDP
_TEXT	ENDS
END
